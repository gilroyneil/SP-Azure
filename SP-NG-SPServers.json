{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "ServiceName": {
            "type": "string"
        },
        "resourceLocation": {
            "type": "string"
        },
        "administratorAccount": {
            "type": "string"
        },
        "administratorPassword": {
            "type": "string"
        },
        "servicePassword": {
            "type": "string"
        },
        "domainJoinUserName": {
            "type": "string"
        },
        "domainJoinPassword": {
            "type": "string"
        },
        "domainJoinOU": {
            "type": "string"
        },
        "domainName": {
            "type": "string"
        },
        "domainNetBiosName": {
            "type": "string"
        },
        "VMSizeSP": {
            "type": "string"
        
        },
                "virtualNetworkName": {
            "type": "string"
        },
        "virtualNetworkResourceGroup": {
            "type": "string"
        },
        "subnetSPName": {
           "type": "string"
        }  ,
        "numberSPServers": {
            "type": "int"
        },
        "workspaceId": {
            "type": "string"      
        },
        "workspaceKey": {
            "type": "string"     
        }
    
          
       
    },
    "variables":{
       "minRole": { 
            "type": "array", 
                "defaultValue": [
                    "WebFrontEnd", "Application", "DistributedCache", "Search",
                    "WebFrontEnd", "Application", "DistributedCache", "Search",
                    "WebFrontEnd", "Application", "DistributedCache", "Search",
                    "WebFrontEnd", "Application", "DistributedCache", "Search",
                    "WebFrontEnd", "Application", "DistributedCache", "Search",
                    "WebFrontEnd", "Application", "DistributedCache", "Search"
            ] 
        },
        "apiVersion": "2015-06-15",
       "virtualNetworkResourceGroup":"[parameters('virtualNetworkResourceGroup')]",
        "virtualNetworkName":"[parameters('virtualNetworkName')]",
        "subnetSPName":"[parameters('subnetSPName')]",
        
        "vnetID": "[resourceId(parameters('virtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",                        
        "subnetSPRef": "[concat(variables('vnetID'),'/subnets/', parameters('subnetSPName'))]",
    
    "publicIPAddressType":"Dynamic",
    "publicIPName": "SPPUBLICIP",
        "resourceLocation":"[parameters('resourceLocation')]",
        "nicNameSP":"[concat(parameters('ServiceName'),'-SPNIC')]",
        
        "SPDomainName":"[concat(parameters('ServiceName'),'-SP')]",
        "StorageType":"Standard_LRS",
        "SPHardware":"[parameters('vmSizeSP')]",
        /*"StorageName":"[concat(parameters('ServiceName'),'storage')]",*/    
        "StorageName":"[concat(parameters('ServiceName'), toLower(uniqueString(deployment().name)))]",
        "VNetName":"[concat(parameters('ServiceName'),'VNet')]",    
        /*
        OLD Single Server code.
        "SP1Name":"[concat(parameters('ServiceName'),'-sp1')]", 
        "SQL1Name":"[concat(parameters('ServiceName'),'-sql1')]", 
        "SP1Disk1Name":"[concat(parameters('ServiceName'),'-eSP1-os')]",
        "SP1Disk2Name":"[concat(parameters('ServiceName'),'-eSP1-data1')]",
        "SP1Disk3Name":"[concat(parameters('ServiceName'),'-eSP1-data2')]",
        
        */
        /*New Multi server code*/
        "SPName":"[concat(parameters('ServiceName'),'-sp')]",          
     
     "SPNameTest":"[uniqueString('aaa')]",    
     
        "SPDisk1Name":"[concat(parameters('ServiceName'),'-os-sp-', uniqueString(deployment().name))]",
        "SPDisk2Name":"[concat(parameters('ServiceName'),'-data1-sp-', uniqueString(deployment().name))]",
        "SPDisk3Name":"[concat(parameters('ServiceName'),'-data2-sp-', uniqueString(deployment().name))]",
        
        "imagePublisher": "MicrosoftWindowsServer",
        "imageOffer": "WindowsServer",
        "imageSKU": "2012-R2-Datacenter",
        "imageVersion": "latest",
    
        
        "SPPrepareMachineModules":"\"xComputerManagement\",\"xNetworking\",\"xActiveDirectory\",\"xPendingReboot_0.1.0.2\",\"xSystemSecurity_1.0\"",        
        /*SQLPrepareMachineModules":"\"xComputerManagement\",\"xNetworking\",\"xActiveDirectory\",\"xSQLServer_1.2.1.0\"",
        "DCPrepareMachineModules":"\"xComputerManagement\",\"xActiveDirectory\"",*/        
        "DCImage": "a699494373c04fc0bc8f2bb1389d6106__Windows-Server-2012-R2-20150916-en.us-127GB.vhd",
        "SPImage": "a699494373c04fc0bc8f2bb1389d6106__Windows-Server-2012-R2-20150916-en.us-127GB.vhd",
        "SQLImage": "a699494373c04fc0bc8f2bb1389d6106__Windows-Server-2012-R2-20150916-en.us-127GB.vhd",
        
        "domainJoinCommand" : "[concat('powershell.exe -ExecutionPolicy Unrestricted -Command .\\JoinAD.ps1 -DomainName \"',parameters('domainName'),'\" -domainNetBiosName \"',parameters('domainNetBiosName'),'\" -DomainAdministratorUserName \"',parameters('domainJoinUserName'),'\" -DomainAdministratorPassword \"',parameters('domainJoinPassword'),'\" -DomainJoinOU \"',parameters('domainJoinOU'), '\" -ServiceUserName \"NGService\" -ServicePassword \"',parameters('servicePassword'), '\"')]",
                
        "CreateSPCommand" : "[concat('powershell.exe -ExecutionPolicy Unrestricted -Command .\\CreateSPServer.ps1 -DomainName \"',parameters('domainName'),'\" -domainNetBiosName \"',parameters('domainNetBiosName'),'\" -DomainAdministratorUserName \"',parameters('administratorAccount'),'\" -DomainAdministratorPassword \"',parameters('administratorPassword'), '\" -ServiceUserName \"SQLService\" -ServicePassword \"',parameters('servicePassword'), '\"')]",
        "SetupSQLCommand" : "[concat('powershell.exe -ExecutionPolicy Unrestricted -Command .\\SetupSQL.ps1 -DomainNetBiosName \"',parameters('domainNetBiosName'),'\" -SQLServiceAccount \"SQLService\" -SQLServiceAccountPassword \"',parameters('servicePassword'), '\" -SQLAgentAccount \"SQLAgent\" -SQLAgentAccountPassword \"',parameters('servicePassword'), '\" -SQLDrive  \"F\"  -SetupAccount \"SPSetup\"')]",
        "SetupSPCommand" : "[concat('powershell.exe -ExecutionPolicy Unrestricted -Command .\\SetupSP.ps1 -DomainName \"',parameters('domainName'),'\" -domainNetBiosName \"',parameters('domainNetBiosName'),'\" -DomainAdministratorUserName \"',parameters('administratorAccount'),'\" -DomainAdministratorPassword \"',parameters('administratorPassword'), '\" -ServiceUserName \"SQLService\" -ServicePassword \"',parameters('servicePassword'), '\"')]"
            
    },
    "resources": [
        
       
  
         {
            "type": "Microsoft.Storage/StorageAccounts",
            "name": "[variables('StorageName')]",
            "apiVersion": "2015-06-15",
            "location": "[parameters('resourceLocation')]",
            "properties": {
                "accountType": "[variables('StorageType')]"
            }
        },
    /*    {
            "type": "Microsoft.ClassicNetwork/virtualNetworks",
            "name": "[variables('VNetName')]",
            "apiVersion": "2014-06-01",
            "location": "[parameters('resourceLocation')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.1.0.0/26"
                    ]
                },
                "dhcpOptions": {
                    "dnsServers": [ "10.1.0.20" ]
                },
                "subnets": [
                    {
                        "name": "Subnet-SP",
                        "addressPrefix": "10.1.0.0/28"
                    },
                    {
                        "name": "Subnet-DC",
                        "addressPrefix": "10.1.0.16/28"
                    }
                ]
            }
        },*/
    
        {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('publicIPName'),'-', copyindex())]",
      "location": "[parameters('resourceLocation')]",
      "copy": {
                "name": "spServerLoop",
                "count": "[parameters('numberSPServers')]"
            },
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('SPName'), copyindex())]"          
        }
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicNameSP'),'-', copyindex())]",
      "location": "[parameters('resourceLocation')]",
      "copy": {
                "name": "spServerLoop",
                "count": "[parameters('numberSPServers')]"
            },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/',  variables('publicIPName'), '-', copyindex())]"
        /*"[concat('Microsoft.Network/loadBalancers/', variables('nicNameSP'),'-LB-', copyindex())]",        
        "[concat('Microsoft.Network/loadBalancers/', variables('nicNameSP'),'-LB-', copyindex(), '/inboundNatRules/', 'RDP-VM')]",
        "[concat('Microsoft.Network/loadBalancers/', variables('nicNameSP'),'-LB-', copyindex(), '/inboundNatRules/', 'RENOTE-PS')]"
        */
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat(variables('publicIPName'), '-', copyindex()))]"
                
              },
              "subnet": {
                "id": "[variables('subnetSPRef')]"
              }
              /*
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('nicNameSP'),'-LB-', copyindex(), '/backendAddressPools/LoadBalancerBackend')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat('Microsoft.Network/loadBalancers/', variables('nicNameSP'),'-LB-', copyindex(), '/inboundNatRules/', 'RDP-VM')]",
                  "id": "[concat('Microsoft.Network/loadBalancers/', variables('nicNameSP'),'-LB-', copyindex(), '/inboundNatRules/', 'RDP-VM')]"
                  
                }
              ]*/
            }
            
          }
        ]
      }
    },
    
    /*
    
    {
      "apiVersion": "2015-06-15",
      "name": "[concat(variables('nicNameSP'),'-LB-', copyindex())]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[parameters('resourceLocation')]",
      "copy": {
                "name": "spServerLoop",
                "count": "[parameters('numberSPServers')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/',  variables('publicIPName'), '-', copyindex())]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontend",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat(variables('publicIPName'), '-', copyindex()))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBackend"
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('nicNameSP'),'-LB-', copyindex(), '/RDP-VM')]",
      "location": "[parameters('resourceLocation')]",
     "copy": {
                "name": "spServerLoop",
                "count": "[parameters('numberSPServers')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('nicNameSP'),'-LB-', copyindex())]"
      ],
      "properties": {
        "frontendIPConfiguration": {
           "id": "[resourceId(concat('Microsoft.Network/loadBalancers/', variables('nicNameSP'),'-LB-', copyindex(), '/frontendIPConfigurations/loadBalancerFrontend')]"          
        },
        "protocol": "tcp",
        "frontendPort": "[concat('1234', copyindex())]",  
        "backendPort": 3389,
        "enableFloatingIP": false
      }
    },
      {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('nicNameSP'),'-LB-', copyindex(), '/REMOTE-PS')]",
      "location": "[parameters('resourceLocation')]",
     "copy": {
                "name": "spServerLoop",
                "count": "[parameters('numberSPServers')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('nicNameSP'),'-LB-', copyindex())]"
      ],
      "properties": {
        "frontendIPConfiguration": {
           "id": "[resourceId(concat('Microsoft.Network/loadBalancers/', variables('nicNameSP'),'-LB-', copyindex(), '/frontendIPConfigurations/loadBalancerFrontend')]"          
        },
        "protocol": "tcp",
        "frontendPort": "5986",  
        "backendPort": 5986,
        "enableFloatingIP": false
      }
    },*/
         {
            "type": "Microsoft.Compute/virtualMachines",            
            "name": "[concat(variables('SPName'), copyindex())]",            
            "apiVersion": "2015-06-15",
            "location": "[parameters('resourceLocation')]",
            
             "copy": {
                "name": "spServerLoop",
                "count": "[parameters('numberSPServers')]"
            },
            "tags": {
          "minRole": "variables('minRole')[copyIndex()]"
          
      },
            "properties": {
                
        
               "networkProfile": 
                   {
                       
                   "networkInterfaces": [
                            {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('nicNameSP'), '-', copyIndex()))]"
                            }
                        ],
          
                    
                    "inputEndpoints": [
                        {
                            "enableDirectServerReturn": "False",
                            "endpointName": "Remote Desktop",
                            "privatePort": 3389,
                            "publicPort": "[concat('1234', copyindex())]",  
                            "protocol": "tcp"
                        },
                        {
                            "enableDirectServerReturn": "False",
                            "endpointName": "Powershell",
                            "privatePort": 5986,
                            "protocol": "tcp"
                        }
                    ]
               },
                "hardwareProfile": {
                    "vmSize": "[variables('SPHardware')]"
                },
                "osProfile": {
                    "computerName": "[concat(variables('SPName'), copyindex())]",                    
                    "adminUserName": "[parameters('administratorAccount')]",
                    "adminPassword": "[parameters('administratorPassword')]"   
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('imageSKU')]",
                        "version": "[variables('imageVersion')]"
                    },
                    "osDisk": {
                        "name": "[concat(variables('SPDisk1Name'), copyindex())]",
                        /*"diskName": "[concat(variables('SPDisk1Name'), '1')]",*/
                       /* "vhdUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('StorageName'))).endpoints[0], 'vhds/', parameters('ServiceName'), variables('SPDisk1Name'), copyindex(),'.vhd')]",*/
                       "vhd":
                       {
                        "uri": "[concat('http://',variables('StorageName'),'.blob.core.windows.net/vhds/', parameters('ServiceName'), variables('SPDisk1Name'),copyindex(),'.vhd')]"
                       },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    },
                    "dataDisks": [
                        {
                            "name": "[concat(variables('SPDisk2Name'), copyindex())]",
                            /*"diskName": "[concat(variables('SPDisk2Name'), '1')]",*/
                            "caching": "None",
                            "diskSizeGB": "50",
                            "lun": "0",
                           /* "vhdUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('StorageName'))).endpoints[0], 'vhds/', parameters('ServiceName'), variables('SPDisk2Name'), copyindex(),'.vhd')]"*/
                            "vhd":
                            {
                                "uri": "[concat('http://',variables('StorageName'),'.blob.core.windows.net/vhds/', parameters('ServiceName'), variables('SPDisk2Name'),copyindex(),'.vhd')]"
                            },
                            "createOption": "Empty"
                        },
                        {
                            "name": "[concat(variables('SPDisk3Name'), copyindex())]",
                            /*"diskName": "[concat(variables('SPDisk3Name'), '1')]",*/
                            "caching": "None",
                            "diskSizeGB": "50",
                            "lun": "1",
                            /*"vhdUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('StorageName'))).endpoints[0], 'vhds/', parameters('ServiceName'), variables('SPDisk3Name'), copyindex(),'.vhd')]"*/
                             "vhd":
                            {
                                "uri": "[concat('http://',variables('StorageName'),'.blob.core.windows.net/vhds/', parameters('ServiceName'), variables('SPDisk3Name'),copyindex(),'.vhd')]"
                            },
                            "createOption": "Empty"
                        }
                    ]

                }
                
            },
          
            "dependsOn": [               
              /*  "[concat('Microsoft.ClassicNetwork/virtualNetworks/', variables('VNetName'))]",*/
                "[concat('Microsoft.Storage/storageAccounts/', variables('StorageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('nicNameSP'), '-', copyIndex())]"
            ]
         },
         
         
         
         {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(variables('SPName'),copyindex(),'/SPPrepareMachineModules')]",
        "apiVersion": "2015-06-15",
        "location": "[parameters('resourceLocation')]",
        "copy": {
                "name": "spServerLoop",
                "count": "[parameters('numberSPServers')]"
            },
        "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', variables('SPName'), copyindex())]"
        ],
        "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.4",
            "settings": {
             "fileUris":[  
                                   "https://armstorageacc.blob.core.windows.net/scripts/PrepareMachine.ps1",
                                   "https://armstorageacc.blob.core.windows.net/scripts/vc_redist.x64.exe",
                                   "https://armstorageacc.blob.core.windows.net/scripts/xComputerManagement.zip",
                                   "https://armstorageacc.blob.core.windows.net/scripts/xNetworking.zip",
                                   "https://armstorageacc.blob.core.windows.net/scripts/xActiveDirectory.zip",
                                   "https://armstorageacc.blob.core.windows.net/scripts/xSQLServer_1.2.1.0.zip",
                                   "https://armstorageacc.blob.core.windows.net/scripts/xSqlPs_1.1.3.1.zip",                                   
                                   "https://armstorageacc.blob.core.windows.net/scripts/azure-powershell.0.9.1.msi",
                                   "https://armstorageacc.blob.core.windows.net/scripts/xPendingReboot_0.1.0.2.zip",
                                   "https://armstorageacc.blob.core.windows.net/scripts/xSystemSecurity_1.0.zip",
                                   "https://armstorageacc.blob.core.windows.net/scripts/Common.ps1",
                            "https://armstorageacc.blob.core.windows.net/scripts/JoinAD.ps1",
                            "https://armstorageacc.blob.core.windows.net/scripts/DiskManager.ps1",
                            "https://armstorageacc.blob.core.windows.net/scripts/MediaMounter.ps1",
                             "https://armstorageacc.blob.core.windows.net/scripts/SetupSQL.ps1",
                             "https://armstorageacc.blob.core.windows.net/scripts/SPPreReqs.ps1"  ,
                             "https://armstorageacc.blob.core.windows.net/scripts/SPBinaries.ps1",
                            "https://armstorageacc.blob.core.windows.net/scripts/SPBinaries4297.ps1",
                            "https://armstorageacc.blob.core.windows.net/scripts/SPCreateOrJoinFarm.ps1"  
                                  
                                ],
            "commandToExecute": "[concat('powershell.exe -ExecutionPolicy Unrestricted -Command .\\PrepareMachine.ps1 -Modules ', variables('SPPrepareMachineModules'),' -Force')]"
            }
        }
        },
        
        {
          "type": "Microsoft.Compute/virtualMachines/extensions",
          "name": "[concat(variables('SPName'),copyindex(),'/Microsoft.EnterpriseCloud.Monitoring')]",          
          "apiVersion": "[variables('apiVersion')]",
          "location": "[parameters('resourceLocation')]",
           "copy": {
                "name": "spServerLoop",
                "count": "[parameters('numberSPServers')]"
            },
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', variables('SPName'), copyindex())]"
          ],
          "properties": {
            "publisher": "Microsoft.EnterpriseCloud.Monitoring",
            "type": "MicrosoftMonitoringAgent",
            "typeHandlerVersion": "1.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
			  "workspaceId": "[parameters('workspaceId')]"
            },
            "protectedSettings": {
			  "workspaceKey": "[parameters('workspaceKey')]"
            }
          }
        }
         
         /*,
            
            
            
           
        {
            "type": "Microsoft.ClassicCompute/virtualMachines/extensions",
            "properties": {
                "extension": "CustomScriptExtension",
                "publisher": "Microsoft.Compute",
                "version": "1.*",
                "parameters": {
                    "public": {
                        "fileUris": [
                            "https://armstorageacc.blob.core.windows.net/scripts/Common.ps1",
                            "https://armstorageacc.blob.core.windows.net/scripts/JoinAD.ps1",
                            "https://armstorageacc.blob.core.windows.net/scripts/xComputerManagement.zip"
                            
                        ],
                        "commandToExecute": "[variables('domainJoinCommand')]"
                    }
                }
            },
            "apiVersion": "2014-06-01",
            "name": "[concat(variables('SP1Name'),'/domainJoinCommand')]",
            "location": "[parameters('resourceLocation')]",
            "dependsOn": [
                 "[resourceId('Microsoft.ClassicCompute/virtualMachines', variables('SP1Name'))]"
                                 
            ]
            
        },
        
        
        
        
        {
            "type": "Microsoft.ClassicCompute/virtualMachines/extensions",
            "properties": {
                "extension": "CustomScriptExtension",
                "publisher": "Microsoft.Compute",
                "version": "1.*",
                "parameters": {
                    "public": {
                        "fileUris": [
                            "https://armstorageacc.blob.core.windows.net/scripts/Common.ps1",
                            "https://armstorageacc.blob.core.windows.net/scripts/CreateSPServer.ps1",
                            "https://armstorageacc.blob.core.windows.net/scripts/xComputerManagement.zip",
                            "https://armstorageacc.blob.core.windows.net/scripts/xSqlPs.zip"
                        ],
                        "commandToExecute": "[variables('CreateSPCommand')]"
                    }
                }
            },
            "apiVersion": "2014-06-01",
            "name": "[concat(variables('SP1Name'),'/CreateSPCommand')]",
            "location": "[parameters('resourceLocation')]",
            "dependsOn": [
                                "[concat('Microsoft.ClassicCompute/virtualMachines/',variables('SP1Name'),'/extensions/domainJoinCommand')]"
            ]
            
        },
        
        {
            "type": "Microsoft.ClassicCompute/virtualMachines/extensions",
            "properties": {
                "extension": "CustomScriptExtension",
                "publisher": "Microsoft.Compute",
                "version": "1.*",
                "parameters": {
                    "public": {
                        "fileUris": [
                            "https://armstorageacc.blob.core.windows.net/scripts/Common.ps1",
                            "https://armstorageacc.blob.core.windows.net/scripts/SetupSP.ps1",
                            "https://armstorageacc.blob.core.windows.net/scripts/ConfigureSharePointFarmInDomain.ps1"
                        ],
                        "commandToExecute": "[variables('SetupSPCommand')]"
                    }
                }
            },
            "apiVersion": "2014-06-01",
            "location": "[parameters('resourceLocation')]",
            "name": "[concat(variables('SP1Name'),'/SetupSPCommand')]",
            "dependsOn": [
                "[concat('Microsoft.ClassicCompute/virtualMachines/',variables('SP1Name'),'/extensions/CreateSPCommand')]"
            ]
        }

        */

    ]
}